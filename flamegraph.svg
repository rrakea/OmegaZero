<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="1441178239038"><g><title>[libc.so.6] (659,259,643 samples, 0.05%)</title><rect x="0.0123%" y="693" width="0.0457%" height="15" fill="rgb(227,0,7)" fg:x="176959443" fg:w="659259643"/><text x="0.2623%" y="703.50"></text></g><g><title>[libc.so.6] (527,405,820 samples, 0.04%)</title><rect x="0.0580%" y="677" width="0.0366%" height="15" fill="rgb(217,0,24)" fg:x="836219086" fg:w="527405820"/><text x="0.3080%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,809,005,945 samples, 0.33%)</title><rect x="0.0994%" y="677" width="0.3337%" height="15" fill="rgb(221,193,54)" fg:x="1431825814" fg:w="4809005945"/><text x="0.3494%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,744,294,233 samples, 0.19%)</title><rect x="0.2426%" y="661" width="0.1904%" height="15" fill="rgb(248,212,6)" fg:x="3496537526" fg:w="2744294233"/><text x="0.4926%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (930,505,017 samples, 0.06%)</title><rect x="0.3685%" y="645" width="0.0646%" height="15" fill="rgb(208,68,35)" fg:x="5310326742" fg:w="930505017"/><text x="0.6185%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (507,882,408 samples, 0.04%)</title><rect x="0.4330%" y="677" width="0.0352%" height="15" fill="rgb(232,128,0)" fg:x="6240831759" fg:w="507882408"/><text x="0.6830%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (208,841,229 samples, 0.01%)</title><rect x="0.4538%" y="661" width="0.0145%" height="15" fill="rgb(207,160,47)" fg:x="6539872938" fg:w="208841229"/><text x="0.7038%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,363,138,234 samples, 0.23%)</title><rect x="0.4683%" y="677" width="0.2334%" height="15" fill="rgb(228,23,34)" fg:x="6748714167" fg:w="3363138234"/><text x="0.7183%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (804,272,265 samples, 0.06%)</title><rect x="0.6458%" y="661" width="0.0558%" height="15" fill="rgb(218,30,26)" fg:x="9307580136" fg:w="804272265"/><text x="0.8958%" y="671.50"></text></g><g><title>alloc::alloc::Global::grow_impl (804,272,265 samples, 0.06%)</title><rect x="0.6458%" y="645" width="0.0558%" height="15" fill="rgb(220,122,19)" fg:x="9307580136" fg:w="804272265"/><text x="0.8958%" y="655.50"></text></g><g><title>alloc::alloc::realloc (804,272,265 samples, 0.06%)</title><rect x="0.6458%" y="629" width="0.0558%" height="15" fill="rgb(250,228,42)" fg:x="9307580136" fg:w="804272265"/><text x="0.8958%" y="639.50"></text></g><g><title>cfree (194,081,852 samples, 0.01%)</title><rect x="0.7016%" y="677" width="0.0135%" height="15" fill="rgb(240,193,28)" fg:x="10111852401" fg:w="194081852"/><text x="0.9516%" y="687.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_move (1,650,365,976 samples, 0.11%)</title><rect x="0.7151%" y="677" width="0.1145%" height="15" fill="rgb(216,20,37)" fg:x="10305934253" fg:w="1650365976"/><text x="0.9651%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (203,999,615 samples, 0.01%)</title><rect x="0.8155%" y="661" width="0.0142%" height="15" fill="rgb(206,188,39)" fg:x="11752300614" fg:w="203999615"/><text x="1.0655%" y="671.50"></text></g><g><title>chess_rs::move_gen::move_gen::moves (344,548,915 samples, 0.02%)</title><rect x="0.8296%" y="677" width="0.0239%" height="15" fill="rgb(217,207,13)" fg:x="11956300229" fg:w="344548915"/><text x="1.0796%" y="687.50"></text></g><g><title>chess_rs::move_gen::outcome::outcome (3,362,053,131 samples, 0.23%)</title><rect x="0.8535%" y="677" width="0.2333%" height="15" fill="rgb(231,73,38)" fg:x="12300849144" fg:w="3362053131"/><text x="1.1035%" y="687.50"></text></g><g><title>chess_rs::tree_search::search::negamax (6,852,089,282 samples, 0.48%)</title><rect x="1.0868%" y="677" width="0.4755%" height="15" fill="rgb(225,20,46)" fg:x="15662902275" fg:w="6852089282"/><text x="1.3368%" y="687.50"></text></g><g><title>malloc (624,495,594 samples, 0.04%)</title><rect x="1.5623%" y="677" width="0.0433%" height="15" fill="rgb(210,31,41)" fg:x="22514991557" fg:w="624495594"/><text x="1.8123%" y="687.50"></text></g><g><title>[unknown] (22,863,442,970 samples, 1.59%)</title><rect x="0.0580%" y="693" width="1.5864%" height="15" fill="rgb(221,200,47)" fg:x="836219086" fg:w="22863442970"/><text x="0.3080%" y="703.50"></text></g><g><title>realloc (560,174,905 samples, 0.04%)</title><rect x="1.6056%" y="677" width="0.0389%" height="15" fill="rgb(226,26,5)" fg:x="23139487151" fg:w="560174905"/><text x="1.8556%" y="687.50"></text></g><g><title>__rustc::__rdl_dealloc (1,215,985,558 samples, 0.08%)</title><rect x="1.6445%" y="693" width="0.0844%" height="15" fill="rgb(249,33,26)" fg:x="23699662056" fg:w="1215985558"/><text x="1.8945%" y="703.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,120,329,581 samples, 0.08%)</title><rect x="1.6511%" y="677" width="0.0777%" height="15" fill="rgb(235,183,28)" fg:x="23795318033" fg:w="1120329581"/><text x="1.9011%" y="687.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_move (196,056,951 samples, 0.01%)</title><rect x="1.7510%" y="309" width="0.0136%" height="15" fill="rgb(221,5,38)" fg:x="25235040179" fg:w="196056951"/><text x="2.0010%" y="319.50"></text></g><g><title>chess_rs::move_gen::move_gen::moves (340,632,470 samples, 0.02%)</title><rect x="1.7442%" y="325" width="0.0236%" height="15" fill="rgb(247,18,42)" fg:x="25137213277" fg:w="340632470"/><text x="1.9942%" y="335.50"></text></g><g><title>chess_rs::eval::eval::material_eval (303,634,568 samples, 0.02%)</title><rect x="1.8086%" y="309" width="0.0211%" height="15" fill="rgb(241,131,45)" fg:x="26065601787" fg:w="303634568"/><text x="2.0586%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (480,113,831 samples, 0.03%)</title><rect x="1.8683%" y="165" width="0.0333%" height="15" fill="rgb(249,31,29)" fg:x="26925768304" fg:w="480113831"/><text x="2.1183%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (480,113,831 samples, 0.03%)</title><rect x="1.8683%" y="149" width="0.0333%" height="15" fill="rgb(225,111,53)" fg:x="26925768304" fg:w="480113831"/><text x="2.1183%" y="159.50"></text></g><g><title>alloc::alloc::realloc (475,937,388 samples, 0.03%)</title><rect x="1.8686%" y="133" width="0.0330%" height="15" fill="rgb(238,160,17)" fg:x="26929944747" fg:w="475937388"/><text x="2.1186%" y="143.50"></text></g><g><title>realloc (458,923,022 samples, 0.03%)</title><rect x="1.8698%" y="117" width="0.0318%" height="15" fill="rgb(214,148,48)" fg:x="26946959113" fg:w="458923022"/><text x="2.1198%" y="127.50"></text></g><g><title>[libc.so.6] (390,602,042 samples, 0.03%)</title><rect x="1.8745%" y="101" width="0.0271%" height="15" fill="rgb(232,36,49)" fg:x="27015280093" fg:w="390602042"/><text x="2.1245%" y="111.50"></text></g><g><title>[libc.so.6] (250,359,164 samples, 0.02%)</title><rect x="1.8843%" y="85" width="0.0174%" height="15" fill="rgb(209,103,24)" fg:x="27155522971" fg:w="250359164"/><text x="2.1343%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (526,781,805 samples, 0.04%)</title><rect x="1.8674%" y="181" width="0.0366%" height="15" fill="rgb(229,88,8)" fg:x="26913045527" fg:w="526781805"/><text x="2.1174%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (633,419,346 samples, 0.04%)</title><rect x="1.8630%" y="261" width="0.0440%" height="15" fill="rgb(213,181,19)" fg:x="26849010258" fg:w="633419346"/><text x="2.1130%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (624,902,447 samples, 0.04%)</title><rect x="1.8636%" y="245" width="0.0434%" height="15" fill="rgb(254,191,54)" fg:x="26857527157" fg:w="624902447"/><text x="2.1136%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (624,902,447 samples, 0.04%)</title><rect x="1.8636%" y="229" width="0.0434%" height="15" fill="rgb(241,83,37)" fg:x="26857527157" fg:w="624902447"/><text x="2.1136%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (612,070,739 samples, 0.04%)</title><rect x="1.8645%" y="213" width="0.0425%" height="15" fill="rgb(233,36,39)" fg:x="26870358865" fg:w="612070739"/><text x="2.1145%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (612,070,739 samples, 0.04%)</title><rect x="1.8645%" y="197" width="0.0425%" height="15" fill="rgb(226,3,54)" fg:x="26870358865" fg:w="612070739"/><text x="2.1145%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (794,973,201 samples, 0.06%)</title><rect x="1.8612%" y="277" width="0.0552%" height="15" fill="rgb(245,192,40)" fg:x="26823512091" fg:w="794973201"/><text x="2.1112%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (816,346,632 samples, 0.06%)</title><rect x="1.8612%" y="293" width="0.0566%" height="15" fill="rgb(238,167,29)" fg:x="26823512091" fg:w="816346632"/><text x="2.1112%" y="303.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_knight_move (201,092,178 samples, 0.01%)</title><rect x="1.9179%" y="293" width="0.0140%" height="15" fill="rgb(232,182,51)" fg:x="27639858723" fg:w="201092178"/><text x="2.1679%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (460,688,217 samples, 0.03%)</title><rect x="1.9866%" y="197" width="0.0320%" height="15" fill="rgb(231,60,39)" fg:x="28629821493" fg:w="460688217"/><text x="2.2366%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (460,688,217 samples, 0.03%)</title><rect x="1.9866%" y="181" width="0.0320%" height="15" fill="rgb(208,69,12)" fg:x="28629821493" fg:w="460688217"/><text x="2.2366%" y="191.50"></text></g><g><title>alloc::alloc::realloc (447,852,423 samples, 0.03%)</title><rect x="1.9874%" y="165" width="0.0311%" height="15" fill="rgb(235,93,37)" fg:x="28642657287" fg:w="447852423"/><text x="2.2374%" y="175.50"></text></g><g><title>realloc (362,587,646 samples, 0.03%)</title><rect x="1.9934%" y="149" width="0.0252%" height="15" fill="rgb(213,116,39)" fg:x="28727922064" fg:w="362587646"/><text x="2.2434%" y="159.50"></text></g><g><title>[libc.so.6] (234,642,382 samples, 0.02%)</title><rect x="2.0022%" y="133" width="0.0163%" height="15" fill="rgb(222,207,29)" fg:x="28855867328" fg:w="234642382"/><text x="2.2522%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (643,900,237 samples, 0.04%)</title><rect x="1.9839%" y="213" width="0.0447%" height="15" fill="rgb(206,96,30)" fg:x="28591342039" fg:w="643900237"/><text x="2.2339%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (844,070,204 samples, 0.06%)</title><rect x="1.9741%" y="261" width="0.0586%" height="15" fill="rgb(218,138,4)" fg:x="28450651474" fg:w="844070204"/><text x="2.2241%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (844,070,204 samples, 0.06%)</title><rect x="1.9741%" y="245" width="0.0586%" height="15" fill="rgb(250,191,14)" fg:x="28450651474" fg:w="844070204"/><text x="2.2241%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (818,426,994 samples, 0.06%)</title><rect x="1.9759%" y="229" width="0.0568%" height="15" fill="rgb(239,60,40)" fg:x="28476294684" fg:w="818426994"/><text x="2.2259%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,133,986,556 samples, 0.08%)</title><rect x="1.9649%" y="277" width="0.0787%" height="15" fill="rgb(206,27,48)" fg:x="28317989713" fg:w="1133986556"/><text x="2.2149%" y="287.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_move (1,653,786,227 samples, 0.11%)</title><rect x="1.9318%" y="293" width="0.1148%" height="15" fill="rgb(225,35,8)" fg:x="27840950901" fg:w="1653786227"/><text x="2.1818%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (149,296,349 samples, 0.01%)</title><rect x="2.0558%" y="277" width="0.0104%" height="15" fill="rgb(250,213,24)" fg:x="29627097883" fg:w="149296349"/><text x="2.3058%" y="287.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_pawn_move (315,683,329 samples, 0.02%)</title><rect x="2.0466%" y="293" width="0.0219%" height="15" fill="rgb(247,123,22)" fg:x="29494737128" fg:w="315683329"/><text x="2.2966%" y="303.50"></text></g><g><title>chess_rs::move_gen::move_gen::moves (3,662,961,546 samples, 0.25%)</title><rect x="1.8297%" y="309" width="0.2542%" height="15" fill="rgb(231,138,38)" fg:x="26369236355" fg:w="3662961546"/><text x="2.0797%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,u8)&gt;&gt; (209,139,994 samples, 0.01%)</title><rect x="2.0694%" y="293" width="0.0145%" height="15" fill="rgb(231,145,46)" fg:x="29823057907" fg:w="209139994"/><text x="2.3194%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u8)&gt;&gt; (209,139,994 samples, 0.01%)</title><rect x="2.0694%" y="277" width="0.0145%" height="15" fill="rgb(251,118,11)" fg:x="29823057907" fg:w="209139994"/><text x="2.3194%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (209,139,994 samples, 0.01%)</title><rect x="2.0694%" y="261" width="0.0145%" height="15" fill="rgb(217,147,25)" fg:x="29823057907" fg:w="209139994"/><text x="2.3194%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (209,139,994 samples, 0.01%)</title><rect x="2.0694%" y="245" width="0.0145%" height="15" fill="rgb(247,81,37)" fg:x="29823057907" fg:w="209139994"/><text x="2.3194%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (209,139,994 samples, 0.01%)</title><rect x="2.0694%" y="229" width="0.0145%" height="15" fill="rgb(209,12,38)" fg:x="29823057907" fg:w="209139994"/><text x="2.3194%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (209,139,994 samples, 0.01%)</title><rect x="2.0694%" y="213" width="0.0145%" height="15" fill="rgb(227,1,9)" fg:x="29823057907" fg:w="209139994"/><text x="2.3194%" y="223.50"></text></g><g><title>cfree (187,857,601 samples, 0.01%)</title><rect x="2.0708%" y="197" width="0.0130%" height="15" fill="rgb(248,47,43)" fg:x="29844340300" fg:w="187857601"/><text x="2.3208%" y="207.50"></text></g><g><title>chess_rs::move_gen::outcome::outcome (868,764,409 samples, 0.06%)</title><rect x="2.0839%" y="309" width="0.0603%" height="15" fill="rgb(221,10,30)" fg:x="30032197901" fg:w="868764409"/><text x="2.3339%" y="319.50"></text></g><g><title>&lt;chess_rs::move_gen::state::State as core::clone::Clone&gt;::clone (189,645,810 samples, 0.01%)</title><rect x="2.1310%" y="293" width="0.0132%" height="15" fill="rgb(210,229,1)" fg:x="30711316500" fg:w="189645810"/><text x="2.3810%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (229,987,964 samples, 0.02%)</title><rect x="2.3902%" y="277" width="0.0160%" height="15" fill="rgb(222,148,37)" fg:x="34446675148" fg:w="229987964"/><text x="2.6402%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (607,003,688 samples, 0.04%)</title><rect x="2.3837%" y="293" width="0.0421%" height="15" fill="rgb(234,67,33)" fg:x="34353059045" fg:w="607003688"/><text x="2.6337%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (283,399,621 samples, 0.02%)</title><rect x="2.4061%" y="277" width="0.0197%" height="15" fill="rgb(247,98,35)" fg:x="34676663112" fg:w="283399621"/><text x="2.6561%" y="287.50"></text></g><g><title>core::ptr::read (283,399,621 samples, 0.02%)</title><rect x="2.4061%" y="261" width="0.0197%" height="15" fill="rgb(247,138,52)" fg:x="34676663112" fg:w="283399621"/><text x="2.6561%" y="271.50"></text></g><g><title>chess_rs::eval::eval::material_eval (4,331,371,825 samples, 0.30%)</title><rect x="2.4258%" y="293" width="0.3005%" height="15" fill="rgb(213,79,30)" fg:x="34960062733" fg:w="4331371825"/><text x="2.6758%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (365,679,135 samples, 0.03%)</title><rect x="2.7010%" y="277" width="0.0254%" height="15" fill="rgb(246,177,23)" fg:x="38925755423" fg:w="365679135"/><text x="2.9510%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (344,400,077 samples, 0.02%)</title><rect x="2.7024%" y="261" width="0.0239%" height="15" fill="rgb(230,62,27)" fg:x="38947034481" fg:w="344400077"/><text x="2.9524%" y="271.50"></text></g><g><title>__rustc::__rdl_realloc (174,584,384 samples, 0.01%)</title><rect x="3.0597%" y="101" width="0.0121%" height="15" fill="rgb(216,154,8)" fg:x="44096188079" fg:w="174584384"/><text x="3.3097%" y="111.50"></text></g><g><title>[libc.so.6] (2,825,324,849 samples, 0.20%)</title><rect x="3.1217%" y="85" width="0.1960%" height="15" fill="rgb(244,35,45)" fg:x="44988732234" fg:w="2825324849"/><text x="3.3717%" y="95.50"></text></g><g><title>[libc.so.6] (1,733,131,871 samples, 0.12%)</title><rect x="3.1974%" y="69" width="0.1203%" height="15" fill="rgb(251,115,12)" fg:x="46080925212" fg:w="1733131871"/><text x="3.4474%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,763,795,389 samples, 0.26%)</title><rect x="3.0571%" y="149" width="0.2612%" height="15" fill="rgb(240,54,50)" fg:x="44058808413" fg:w="3763795389"/><text x="3.3071%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,763,795,389 samples, 0.26%)</title><rect x="3.0571%" y="133" width="0.2612%" height="15" fill="rgb(233,84,52)" fg:x="44058808413" fg:w="3763795389"/><text x="3.3071%" y="143.50"></text></g><g><title>alloc::alloc::realloc (3,742,308,943 samples, 0.26%)</title><rect x="3.0586%" y="117" width="0.2597%" height="15" fill="rgb(207,117,47)" fg:x="44080294859" fg:w="3742308943"/><text x="3.3086%" y="127.50"></text></g><g><title>realloc (3,521,984,543 samples, 0.24%)</title><rect x="3.0739%" y="101" width="0.2444%" height="15" fill="rgb(249,43,39)" fg:x="44300619259" fg:w="3521984543"/><text x="3.3239%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,346,490,650 samples, 0.30%)</title><rect x="3.0466%" y="165" width="0.3016%" height="15" fill="rgb(209,38,44)" fg:x="43906600973" fg:w="4346490650"/><text x="3.2966%" y="175.50"></text></g><g><title>malloc (306,705,037 samples, 0.02%)</title><rect x="3.3269%" y="149" width="0.0213%" height="15" fill="rgb(236,212,23)" fg:x="47946386586" fg:w="306705037"/><text x="3.5769%" y="159.50"></text></g><g><title>alloc::raw_vec::layout_array (173,845,434 samples, 0.01%)</title><rect x="3.3482%" y="165" width="0.0121%" height="15" fill="rgb(242,79,21)" fg:x="48253091623" fg:w="173845434"/><text x="3.5982%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat (173,845,434 samples, 0.01%)</title><rect x="3.3482%" y="149" width="0.0121%" height="15" fill="rgb(211,96,35)" fg:x="48253091623" fg:w="173845434"/><text x="3.5982%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5,229,641,966 samples, 0.36%)</title><rect x="3.0080%" y="245" width="0.3629%" height="15" fill="rgb(253,215,40)" fg:x="43350553321" fg:w="5229641966"/><text x="3.2580%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5,208,200,767 samples, 0.36%)</title><rect x="3.0095%" y="229" width="0.3614%" height="15" fill="rgb(211,81,21)" fg:x="43371994520" fg:w="5208200767"/><text x="3.2595%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (5,208,200,767 samples, 0.36%)</title><rect x="3.0095%" y="213" width="0.3614%" height="15" fill="rgb(208,190,38)" fg:x="43371994520" fg:w="5208200767"/><text x="3.2595%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4,990,794,151 samples, 0.35%)</title><rect x="3.0246%" y="197" width="0.3463%" height="15" fill="rgb(235,213,38)" fg:x="43589401136" fg:w="4990794151"/><text x="3.2746%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,990,794,151 samples, 0.35%)</title><rect x="3.0246%" y="181" width="0.3463%" height="15" fill="rgb(237,122,38)" fg:x="43589401136" fg:w="4990794151"/><text x="3.2746%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,151,548,805 samples, 0.08%)</title><rect x="3.3709%" y="245" width="0.0799%" height="15" fill="rgb(244,218,35)" fg:x="48580195287" fg:w="1151548805"/><text x="3.6209%" y="255.50"></text></g><g><title>[libc.so.6] (1,147,307,867 samples, 0.08%)</title><rect x="3.3712%" y="229" width="0.0796%" height="15" fill="rgb(240,68,47)" fg:x="48584436225" fg:w="1147307867"/><text x="3.6212%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6,706,764,101 samples, 0.47%)</title><rect x="2.9904%" y="261" width="0.4654%" height="15" fill="rgb(210,16,53)" fg:x="43097363196" fg:w="6706764101"/><text x="3.2404%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (6,839,789,922 samples, 0.47%)</title><rect x="2.9904%" y="277" width="0.4746%" height="15" fill="rgb(235,124,12)" fg:x="43097363196" fg:w="6839789922"/><text x="3.2404%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (195,999,745 samples, 0.01%)</title><rect x="3.4742%" y="261" width="0.0136%" height="15" fill="rgb(224,169,11)" fg:x="50069091297" fg:w="195999745"/><text x="3.7242%" y="271.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_knight_move (327,817,048 samples, 0.02%)</title><rect x="3.4662%" y="277" width="0.0227%" height="15" fill="rgb(250,166,2)" fg:x="49954305369" fg:w="327817048"/><text x="3.7162%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (744,825,529 samples, 0.05%)</title><rect x="3.8940%" y="261" width="0.0517%" height="15" fill="rgb(242,216,29)" fg:x="56119582063" fg:w="744825529"/><text x="4.1440%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (173,540,533 samples, 0.01%)</title><rect x="3.9336%" y="245" width="0.0120%" height="15" fill="rgb(230,116,27)" fg:x="56690867059" fg:w="173540533"/><text x="4.1836%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (415,973,628 samples, 0.03%)</title><rect x="4.0334%" y="197" width="0.0289%" height="15" fill="rgb(228,99,48)" fg:x="58127839742" fg:w="415973628"/><text x="4.2834%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (420,676,703 samples, 0.03%)</title><rect x="4.0622%" y="197" width="0.0292%" height="15" fill="rgb(253,11,6)" fg:x="58543813370" fg:w="420676703"/><text x="4.3122%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (514,835,183 samples, 0.04%)</title><rect x="4.1380%" y="133" width="0.0357%" height="15" fill="rgb(247,143,39)" fg:x="59635706137" fg:w="514835183"/><text x="4.3880%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (250,144,214 samples, 0.02%)</title><rect x="4.1563%" y="117" width="0.0174%" height="15" fill="rgb(236,97,10)" fg:x="59900397106" fg:w="250144214"/><text x="4.4063%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,412,980,379 samples, 0.31%)</title><rect x="4.1288%" y="181" width="0.3062%" height="15" fill="rgb(233,208,19)" fg:x="59503633056" fg:w="4412980379"/><text x="4.3788%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,412,980,379 samples, 0.31%)</title><rect x="4.1288%" y="165" width="0.3062%" height="15" fill="rgb(216,164,2)" fg:x="59503633056" fg:w="4412980379"/><text x="4.3788%" y="175.50"></text></g><g><title>alloc::alloc::realloc (4,336,201,418 samples, 0.30%)</title><rect x="4.1341%" y="149" width="0.3009%" height="15" fill="rgb(220,129,5)" fg:x="59580412017" fg:w="4336201418"/><text x="4.3841%" y="159.50"></text></g><g><title>realloc (3,702,348,772 samples, 0.26%)</title><rect x="4.1781%" y="133" width="0.2569%" height="15" fill="rgb(242,17,10)" fg:x="60214264663" fg:w="3702348772"/><text x="4.4281%" y="143.50"></text></g><g><title>[libc.so.6] (2,147,937,599 samples, 0.15%)</title><rect x="4.2860%" y="117" width="0.1490%" height="15" fill="rgb(242,107,0)" fg:x="61768675836" fg:w="2147937599"/><text x="4.5360%" y="127.50"></text></g><g><title>[libc.so.6] (1,166,543,006 samples, 0.08%)</title><rect x="4.3541%" y="101" width="0.0809%" height="15" fill="rgb(251,28,31)" fg:x="62750070429" fg:w="1166543006"/><text x="4.6041%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (229,927,573 samples, 0.02%)</title><rect x="4.4503%" y="181" width="0.0160%" height="15" fill="rgb(233,223,10)" fg:x="64137437507" fg:w="229927573"/><text x="4.7003%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (6,366,968,665 samples, 0.44%)</title><rect x="4.0988%" y="197" width="0.4418%" height="15" fill="rgb(215,21,27)" fg:x="59070998928" fg:w="6366968665"/><text x="4.3488%" y="207.50"></text></g><g><title>malloc (1,070,602,513 samples, 0.07%)</title><rect x="4.4663%" y="181" width="0.0743%" height="15" fill="rgb(232,23,21)" fg:x="64367365080" fg:w="1070602513"/><text x="4.7163%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7,839,596,110 samples, 0.54%)</title><rect x="4.0170%" y="245" width="0.5440%" height="15" fill="rgb(244,5,23)" fg:x="57892680471" fg:w="7839596110"/><text x="4.2670%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (7,839,596,110 samples, 0.54%)</title><rect x="4.0170%" y="229" width="0.5440%" height="15" fill="rgb(226,81,46)" fg:x="57892680471" fg:w="7839596110"/><text x="4.2670%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,702,893,423 samples, 0.53%)</title><rect x="4.0265%" y="213" width="0.5345%" height="15" fill="rgb(247,70,30)" fg:x="58029383158" fg:w="7702893423"/><text x="4.2765%" y="223.50"></text></g><g><title>core::cmp::max (157,917,276 samples, 0.01%)</title><rect x="4.5501%" y="197" width="0.0110%" height="15" fill="rgb(212,68,19)" fg:x="65574359305" fg:w="157917276"/><text x="4.8001%" y="207.50"></text></g><g><title>core::cmp::Ord::max (157,917,276 samples, 0.01%)</title><rect x="4.5501%" y="181" width="0.0110%" height="15" fill="rgb(240,187,13)" fg:x="65574359305" fg:w="157917276"/><text x="4.8001%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (222,162,109 samples, 0.02%)</title><rect x="4.5610%" y="245" width="0.0154%" height="15" fill="rgb(223,113,26)" fg:x="65732276581" fg:w="222162109"/><text x="4.8110%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (222,162,109 samples, 0.02%)</title><rect x="4.5610%" y="229" width="0.0154%" height="15" fill="rgb(206,192,2)" fg:x="65732276581" fg:w="222162109"/><text x="4.8110%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (222,162,109 samples, 0.02%)</title><rect x="4.5610%" y="213" width="0.0154%" height="15" fill="rgb(241,108,4)" fg:x="65732276581" fg:w="222162109"/><text x="4.8110%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (222,162,109 samples, 0.02%)</title><rect x="4.5610%" y="197" width="0.0154%" height="15" fill="rgb(247,173,49)" fg:x="65732276581" fg:w="222162109"/><text x="4.8110%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10,500,744,736 samples, 0.73%)</title><rect x="3.9457%" y="261" width="0.7286%" height="15" fill="rgb(224,114,35)" fg:x="56864407592" fg:w="10500744736"/><text x="4.1957%" y="271.50"></text></g><g><title>core::ptr::write (1,410,713,638 samples, 0.10%)</title><rect x="4.5764%" y="245" width="0.0979%" height="15" fill="rgb(245,159,27)" fg:x="65954438690" fg:w="1410713638"/><text x="4.8264%" y="255.50"></text></g><g><title>core::num::&lt;impl i32&gt;::abs (702,237,672 samples, 0.05%)</title><rect x="4.6810%" y="261" width="0.0487%" height="15" fill="rgb(245,172,44)" fg:x="67461765293" fg:w="702237672"/><text x="4.9310%" y="271.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_move (18,086,961,581 samples, 1.26%)</title><rect x="3.4890%" y="277" width="1.2550%" height="15" fill="rgb(236,23,11)" fg:x="50282122417" fg:w="18086961581"/><text x="3.7390%" y="287.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (205,081,033 samples, 0.01%)</title><rect x="4.7297%" y="261" width="0.0142%" height="15" fill="rgb(205,117,38)" fg:x="68164002965" fg:w="205081033"/><text x="4.9797%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (205,081,033 samples, 0.01%)</title><rect x="4.7297%" y="245" width="0.0142%" height="15" fill="rgb(237,72,25)" fg:x="68164002965" fg:w="205081033"/><text x="4.9797%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (205,081,033 samples, 0.01%)</title><rect x="4.7297%" y="229" width="0.0142%" height="15" fill="rgb(244,70,9)" fg:x="68164002965" fg:w="205081033"/><text x="4.9797%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (205,081,033 samples, 0.01%)</title><rect x="4.7297%" y="213" width="0.0142%" height="15" fill="rgb(217,125,39)" fg:x="68164002965" fg:w="205081033"/><text x="4.9797%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,098,243,715 samples, 0.08%)</title><rect x="4.8277%" y="197" width="0.0762%" height="15" fill="rgb(235,36,10)" fg:x="69576125862" fg:w="1098243715"/><text x="5.0777%" y="207.50"></text></g><g><title>malloc (761,364,880 samples, 0.05%)</title><rect x="4.8511%" y="181" width="0.0528%" height="15" fill="rgb(251,123,47)" fg:x="69913004697" fg:w="761364880"/><text x="5.1011%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,412,950,484 samples, 0.10%)</title><rect x="4.8124%" y="245" width="0.0980%" height="15" fill="rgb(221,13,13)" fg:x="69354700901" fg:w="1412950484"/><text x="5.0624%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,412,950,484 samples, 0.10%)</title><rect x="4.8124%" y="229" width="0.0980%" height="15" fill="rgb(238,131,9)" fg:x="69354700901" fg:w="1412950484"/><text x="5.0624%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,408,631,456 samples, 0.10%)</title><rect x="4.8127%" y="213" width="0.0977%" height="15" fill="rgb(211,50,8)" fg:x="69359019929" fg:w="1408631456"/><text x="5.0627%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,760,517,907 samples, 0.12%)</title><rect x="4.8085%" y="261" width="0.1222%" height="15" fill="rgb(245,182,24)" fg:x="69299294073" fg:w="1760517907"/><text x="5.0585%" y="271.50"></text></g><g><title>core::ptr::write (292,160,595 samples, 0.02%)</title><rect x="4.9104%" y="245" width="0.0203%" height="15" fill="rgb(242,14,37)" fg:x="70767651385" fg:w="292160595"/><text x="5.1604%" y="255.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_pawn_move (2,890,781,792 samples, 0.20%)</title><rect x="4.7440%" y="277" width="0.2006%" height="15" fill="rgb(246,228,12)" fg:x="68369083998" fg:w="2890781792"/><text x="4.9940%" y="287.50"></text></g><g><title>chess_rs::move_gen::state::State::active (185,287,374 samples, 0.01%)</title><rect x="4.9446%" y="277" width="0.0129%" height="15" fill="rgb(213,55,15)" fg:x="71259865790" fg:w="185287374"/><text x="5.1946%" y="287.50"></text></g><g><title>__rustc::__rust_dealloc (149,228,831 samples, 0.01%)</title><rect x="4.9710%" y="181" width="0.0104%" height="15" fill="rgb(209,9,3)" fg:x="71641398604" fg:w="149228831"/><text x="5.2210%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,300,670,380 samples, 0.16%)</title><rect x="4.9601%" y="213" width="0.1596%" height="15" fill="rgb(230,59,30)" fg:x="71483746281" fg:w="2300670380"/><text x="5.2101%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2,300,670,380 samples, 0.16%)</title><rect x="4.9601%" y="197" width="0.1596%" height="15" fill="rgb(209,121,21)" fg:x="71483746281" fg:w="2300670380"/><text x="5.2101%" y="207.50"></text></g><g><title>cfree (1,993,789,226 samples, 0.14%)</title><rect x="4.9814%" y="181" width="0.1383%" height="15" fill="rgb(220,109,13)" fg:x="71790627435" fg:w="1993789226"/><text x="5.2314%" y="191.50"></text></g><g><title>[libc.so.6] (164,695,254 samples, 0.01%)</title><rect x="5.1083%" y="165" width="0.0114%" height="15" fill="rgb(232,18,1)" fg:x="73619721407" fg:w="164695254"/><text x="5.3583%" y="175.50"></text></g><g><title>chess_rs::move_gen::move_gen::moves (34,510,106,256 samples, 2.39%)</title><rect x="2.7263%" y="293" width="2.3946%" height="15" fill="rgb(215,41,42)" fg:x="39291434558" fg:w="34510106256"/><text x="2.9763%" y="303.50">ch..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,u8)&gt;&gt; (2,356,387,650 samples, 0.16%)</title><rect x="4.9574%" y="277" width="0.1635%" height="15" fill="rgb(224,123,36)" fg:x="71445153164" fg:w="2356387650"/><text x="5.2074%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u8)&gt;&gt; (2,317,794,533 samples, 0.16%)</title><rect x="4.9601%" y="261" width="0.1608%" height="15" fill="rgb(240,125,3)" fg:x="71483746281" fg:w="2317794533"/><text x="5.2101%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,317,794,533 samples, 0.16%)</title><rect x="4.9601%" y="245" width="0.1608%" height="15" fill="rgb(205,98,50)" fg:x="71483746281" fg:w="2317794533"/><text x="5.2101%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,317,794,533 samples, 0.16%)</title><rect x="4.9601%" y="229" width="0.1608%" height="15" fill="rgb(205,185,37)" fg:x="71483746281" fg:w="2317794533"/><text x="5.2101%" y="239.50"></text></g><g><title>chess_rs::move_gen::outcome::outcome (7,746,509,689 samples, 0.54%)</title><rect x="5.1209%" y="293" width="0.5375%" height="15" fill="rgb(238,207,15)" fg:x="73801540814" fg:w="7746509689"/><text x="5.3709%" y="303.50"></text></g><g><title>&lt;chess_rs::move_gen::state::State as core::clone::Clone&gt;::clone (1,458,890,199 samples, 0.10%)</title><rect x="5.5572%" y="277" width="0.1012%" height="15" fill="rgb(213,199,42)" fg:x="80089160304" fg:w="1458890199"/><text x="5.8072%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (518,175,140 samples, 0.04%)</title><rect x="8.6084%" y="277" width="0.0360%" height="15" fill="rgb(235,201,11)" fg:x="124063101468" fg:w="518175140"/><text x="8.8584%" y="287.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (518,175,140 samples, 0.04%)</title><rect x="8.6084%" y="261" width="0.0360%" height="15" fill="rgb(207,46,11)" fg:x="124063101468" fg:w="518175140"/><text x="8.8584%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,490,575,399 samples, 0.17%)</title><rect x="8.7095%" y="261" width="0.1728%" height="15" fill="rgb(241,35,35)" fg:x="125519609129" fg:w="2490575399"/><text x="8.9595%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,175,236,014 samples, 0.43%)</title><rect x="8.6444%" y="277" width="0.4285%" height="15" fill="rgb(243,32,47)" fg:x="124581276608" fg:w="6175236014"/><text x="8.8944%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (2,746,328,094 samples, 0.19%)</title><rect x="8.8823%" y="261" width="0.1906%" height="15" fill="rgb(247,202,23)" fg:x="128010184528" fg:w="2746328094"/><text x="9.1323%" y="271.50"></text></g><g><title>core::ptr::read (2,746,328,094 samples, 0.19%)</title><rect x="8.8823%" y="245" width="0.1906%" height="15" fill="rgb(219,102,11)" fg:x="128010184528" fg:w="2746328094"/><text x="9.1323%" y="255.50"></text></g><g><title>chess_rs::eval::eval::material_eval (59,384,187,433 samples, 4.12%)</title><rect x="9.0729%" y="277" width="4.1205%" height="15" fill="rgb(243,110,44)" fg:x="130756512622" fg:w="59384187433"/><text x="9.3229%" y="287.50">ches..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,512,996,434 samples, 0.24%)</title><rect x="12.9497%" y="261" width="0.2438%" height="15" fill="rgb(222,74,54)" fg:x="186627703621" fg:w="3512996434"/><text x="13.1997%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,333,999,998 samples, 0.23%)</title><rect x="12.9621%" y="245" width="0.2313%" height="15" fill="rgb(216,99,12)" fg:x="186806700057" fg:w="3333999998"/><text x="13.2121%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (349,942,152 samples, 0.02%)</title><rect x="14.9546%" y="261" width="0.0243%" height="15" fill="rgb(226,22,26)" fg:x="215522479076" fg:w="349942152"/><text x="15.2046%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (349,942,152 samples, 0.02%)</title><rect x="14.9546%" y="245" width="0.0243%" height="15" fill="rgb(217,163,10)" fg:x="215522479076" fg:w="349942152"/><text x="15.2046%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (269,004,570 samples, 0.02%)</title><rect x="14.9602%" y="229" width="0.0187%" height="15" fill="rgb(213,25,53)" fg:x="215603416658" fg:w="269004570"/><text x="15.2102%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (432,024,595 samples, 0.03%)</title><rect x="15.0220%" y="229" width="0.0300%" height="15" fill="rgb(252,105,26)" fg:x="216494234631" fg:w="432024595"/><text x="15.2720%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (432,024,595 samples, 0.03%)</title><rect x="15.0220%" y="213" width="0.0300%" height="15" fill="rgb(220,39,43)" fg:x="216494234631" fg:w="432024595"/><text x="15.2720%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (432,024,595 samples, 0.03%)</title><rect x="15.0220%" y="197" width="0.0300%" height="15" fill="rgb(229,68,48)" fg:x="216494234631" fg:w="432024595"/><text x="15.2720%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (432,024,595 samples, 0.03%)</title><rect x="15.0220%" y="181" width="0.0300%" height="15" fill="rgb(252,8,32)" fg:x="216494234631" fg:w="432024595"/><text x="15.2720%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (219,914,850 samples, 0.02%)</title><rect x="15.0520%" y="229" width="0.0153%" height="15" fill="rgb(223,20,43)" fg:x="216926259226" fg:w="219914850"/><text x="15.3020%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (300,100,308 samples, 0.02%)</title><rect x="15.1694%" y="181" width="0.0208%" height="15" fill="rgb(229,81,49)" fg:x="218617964898" fg:w="300100308"/><text x="15.4194%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (876,249,462 samples, 0.06%)</title><rect x="15.2540%" y="149" width="0.0608%" height="15" fill="rgb(236,28,36)" fg:x="219836781009" fg:w="876249462"/><text x="15.5040%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (825,784,740 samples, 0.06%)</title><rect x="15.3148%" y="149" width="0.0573%" height="15" fill="rgb(249,185,26)" fg:x="220713030471" fg:w="825784740"/><text x="15.5648%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (273,886,573 samples, 0.02%)</title><rect x="15.3721%" y="149" width="0.0190%" height="15" fill="rgb(249,174,33)" fg:x="221538815211" fg:w="273886573"/><text x="15.6221%" y="159.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (235,246,819 samples, 0.02%)</title><rect x="15.4553%" y="101" width="0.0163%" height="15" fill="rgb(233,201,37)" fg:x="222738344777" fg:w="235246819"/><text x="15.7053%" y="111.50"></text></g><g><title>__rustc::__rdl_realloc (1,690,509,856 samples, 0.12%)</title><rect x="15.4849%" y="85" width="0.1173%" height="15" fill="rgb(221,78,26)" fg:x="223164678029" fg:w="1690509856"/><text x="15.7349%" y="95.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (936,286,468 samples, 0.06%)</title><rect x="15.5372%" y="69" width="0.0650%" height="15" fill="rgb(250,127,30)" fg:x="223918901417" fg:w="936286468"/><text x="15.7872%" y="79.50"></text></g><g><title>__rustc::__rust_realloc (304,335,778 samples, 0.02%)</title><rect x="15.6022%" y="85" width="0.0211%" height="15" fill="rgb(230,49,44)" fg:x="224855187885" fg:w="304335778"/><text x="15.8522%" y="95.50"></text></g><g><title>[libc.so.6] (14,648,027,426 samples, 1.02%)</title><rect x="16.6089%" y="53" width="1.0164%" height="15" fill="rgb(229,67,23)" fg:x="239364213874" fg:w="14648027426"/><text x="16.8589%" y="63.50"></text></g><g><title>[libc.so.6] (379,184,142 samples, 0.03%)</title><rect x="17.5990%" y="37" width="0.0263%" height="15" fill="rgb(249,83,47)" fg:x="253633057158" fg:w="379184142"/><text x="17.8490%" y="47.50"></text></g><g><title>[libc.so.6] (22,542,031,977 samples, 1.56%)</title><rect x="16.0615%" y="69" width="1.5641%" height="15" fill="rgb(215,43,3)" fg:x="231474297748" fg:w="22542031977"/><text x="16.3115%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (31,359,009,539 samples, 2.18%)</title><rect x="15.4500%" y="133" width="2.1759%" height="15" fill="rgb(238,154,13)" fg:x="222661593630" fg:w="31359009539"/><text x="15.7000%" y="143.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (31,359,009,539 samples, 2.18%)</title><rect x="15.4500%" y="117" width="2.1759%" height="15" fill="rgb(219,56,2)" fg:x="222661593630" fg:w="31359009539"/><text x="15.7000%" y="127.50">a..</text></g><g><title>alloc::alloc::realloc (31,047,011,573 samples, 2.15%)</title><rect x="15.4716%" y="101" width="2.1543%" height="15" fill="rgb(233,0,4)" fg:x="222973591596" fg:w="31047011573"/><text x="15.7216%" y="111.50">a..</text></g><g><title>realloc (28,861,079,506 samples, 2.00%)</title><rect x="15.6233%" y="85" width="2.0026%" height="15" fill="rgb(235,30,7)" fg:x="225159523663" fg:w="28861079506"/><text x="15.8733%" y="95.50">r..</text></g><g><title>__rustc::__rdl_alloc (203,009,416 samples, 0.01%)</title><rect x="17.6259%" y="133" width="0.0141%" height="15" fill="rgb(250,79,13)" fg:x="254020603169" fg:w="203009416"/><text x="17.8759%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (203,009,416 samples, 0.01%)</title><rect x="17.6259%" y="117" width="0.0141%" height="15" fill="rgb(211,146,34)" fg:x="254020603169" fg:w="203009416"/><text x="17.8759%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (493,453,550 samples, 0.03%)</title><rect x="17.6492%" y="133" width="0.0342%" height="15" fill="rgb(228,22,38)" fg:x="254356754777" fg:w="493453550"/><text x="17.8992%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (35,069,070,790 samples, 2.43%)</title><rect x="15.3911%" y="149" width="2.4334%" height="15" fill="rgb(235,168,5)" fg:x="221812701784" fg:w="35069070790"/><text x="15.6411%" y="159.50">al..</text></g><g><title>malloc (2,031,564,247 samples, 0.14%)</title><rect x="17.6835%" y="133" width="0.1410%" height="15" fill="rgb(221,155,16)" fg:x="254850208327" fg:w="2031564247"/><text x="17.9335%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (489,178,507 samples, 0.03%)</title><rect x="17.8482%" y="117" width="0.0339%" height="15" fill="rgb(215,215,53)" fg:x="257224440102" fg:w="489178507"/><text x="18.0982%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (489,178,507 samples, 0.03%)</title><rect x="17.8482%" y="101" width="0.0339%" height="15" fill="rgb(223,4,10)" fg:x="257224440102" fg:w="489178507"/><text x="18.0982%" y="111.50"></text></g><g><title>alloc::raw_vec::layout_array (1,271,459,813 samples, 0.09%)</title><rect x="17.8244%" y="149" width="0.0882%" height="15" fill="rgb(234,103,6)" fg:x="256881772574" fg:w="1271459813"/><text x="18.0744%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1,271,459,813 samples, 0.09%)</title><rect x="17.8244%" y="133" width="0.0882%" height="15" fill="rgb(227,97,0)" fg:x="256881772574" fg:w="1271459813"/><text x="18.0744%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (439,613,778 samples, 0.03%)</title><rect x="17.8821%" y="117" width="0.0305%" height="15" fill="rgb(234,150,53)" fg:x="257713618609" fg:w="439613778"/><text x="18.1321%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (439,613,778 samples, 0.03%)</title><rect x="17.8821%" y="101" width="0.0305%" height="15" fill="rgb(228,201,54)" fg:x="257713618609" fg:w="439613778"/><text x="18.1321%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (439,613,778 samples, 0.03%)</title><rect x="17.8821%" y="85" width="0.0305%" height="15" fill="rgb(222,22,37)" fg:x="257713618609" fg:w="439613778"/><text x="18.1321%" y="95.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (757,074,274 samples, 0.05%)</title><rect x="17.9127%" y="149" width="0.0525%" height="15" fill="rgb(237,53,32)" fg:x="258153232387" fg:w="757074274"/><text x="18.1627%" y="159.50"></text></g><g><title>core::cmp::max (443,776,040 samples, 0.03%)</title><rect x="17.9652%" y="149" width="0.0308%" height="15" fill="rgb(233,25,53)" fg:x="258910306661" fg:w="443776040"/><text x="18.2152%" y="159.50"></text></g><g><title>core::cmp::Ord::max (443,776,040 samples, 0.03%)</title><rect x="17.9652%" y="133" width="0.0308%" height="15" fill="rgb(210,40,34)" fg:x="258910306661" fg:w="443776040"/><text x="18.2152%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (42,253,679,981 samples, 2.93%)</title><rect x="15.0673%" y="229" width="2.9319%" height="15" fill="rgb(241,220,44)" fg:x="217146174076" fg:w="42253679981"/><text x="15.3173%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (41,952,829,135 samples, 2.91%)</title><rect x="15.0881%" y="213" width="2.9110%" height="15" fill="rgb(235,28,35)" fg:x="217447024922" fg:w="41952829135"/><text x="15.3381%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (41,952,829,135 samples, 2.91%)</title><rect x="15.0881%" y="197" width="2.9110%" height="15" fill="rgb(210,56,17)" fg:x="217447024922" fg:w="41952829135"/><text x="15.3381%" y="207.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (40,481,788,851 samples, 2.81%)</title><rect x="15.1902%" y="181" width="2.8089%" height="15" fill="rgb(224,130,29)" fg:x="218918065206" fg:w="40481788851"/><text x="15.4402%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (40,481,788,851 samples, 2.81%)</title><rect x="15.1902%" y="165" width="2.8089%" height="15" fill="rgb(235,212,8)" fg:x="218918065206" fg:w="40481788851"/><text x="15.4402%" y="175.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7,041,665,055 samples, 0.49%)</title><rect x="17.9992%" y="229" width="0.4886%" height="15" fill="rgb(223,33,50)" fg:x="259399854057" fg:w="7041665055"/><text x="18.2492%" y="239.50"></text></g><g><title>[libc.so.6] (6,977,653,114 samples, 0.48%)</title><rect x="18.0036%" y="213" width="0.4842%" height="15" fill="rgb(219,149,13)" fg:x="259463865998" fg:w="6977653114"/><text x="18.2536%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (51,248,779,167 samples, 3.56%)</title><rect x="14.9789%" y="245" width="3.5560%" height="15" fill="rgb(250,156,29)" fg:x="215872421228" fg:w="51248779167"/><text x="15.2289%" y="255.50">allo..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (679,681,283 samples, 0.05%)</title><rect x="18.4878%" y="229" width="0.0472%" height="15" fill="rgb(216,193,19)" fg:x="266441519112" fg:w="679681283"/><text x="18.7378%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (52,109,957,209 samples, 3.62%)</title><rect x="14.9789%" y="261" width="3.6158%" height="15" fill="rgb(216,135,14)" fg:x="215872421228" fg:w="52109957209"/><text x="15.2289%" y="271.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (861,178,042 samples, 0.06%)</title><rect x="18.5349%" y="245" width="0.0598%" height="15" fill="rgb(241,47,5)" fg:x="267121200395" fg:w="861178042"/><text x="18.7849%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (670,413,236 samples, 0.05%)</title><rect x="18.5482%" y="229" width="0.0465%" height="15" fill="rgb(233,42,35)" fg:x="267311965201" fg:w="670413236"/><text x="18.7982%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (670,413,236 samples, 0.05%)</title><rect x="18.5482%" y="213" width="0.0465%" height="15" fill="rgb(231,13,6)" fg:x="267311965201" fg:w="670413236"/><text x="18.7982%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (670,413,236 samples, 0.05%)</title><rect x="18.5482%" y="197" width="0.0465%" height="15" fill="rgb(207,181,40)" fg:x="267311965201" fg:w="670413236"/><text x="18.7982%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (670,413,236 samples, 0.05%)</title><rect x="18.5482%" y="181" width="0.0465%" height="15" fill="rgb(254,173,49)" fg:x="267311965201" fg:w="670413236"/><text x="18.7982%" y="191.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (468,764,630 samples, 0.03%)</title><rect x="18.8050%" y="213" width="0.0325%" height="15" fill="rgb(221,1,38)" fg:x="271014086444" fg:w="468764630"/><text x="19.0550%" y="223.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (468,764,630 samples, 0.03%)</title><rect x="18.8050%" y="197" width="0.0325%" height="15" fill="rgb(206,124,46)" fg:x="271014086444" fg:w="468764630"/><text x="19.0550%" y="207.50"></text></g><g><title>core::ops::index_range::IndexRange::len (468,764,630 samples, 0.03%)</title><rect x="18.8050%" y="181" width="0.0325%" height="15" fill="rgb(249,21,11)" fg:x="271014086444" fg:w="468764630"/><text x="19.0550%" y="191.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (1,247,262,675 samples, 0.09%)</title><rect x="18.7767%" y="229" width="0.0865%" height="15" fill="rgb(222,201,40)" fg:x="270605476085" fg:w="1247262675"/><text x="19.0267%" y="239.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (369,887,686 samples, 0.03%)</title><rect x="18.8376%" y="213" width="0.0257%" height="15" fill="rgb(235,61,29)" fg:x="271482851074" fg:w="369887686"/><text x="19.0876%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (225,340,291 samples, 0.02%)</title><rect x="18.8476%" y="197" width="0.0156%" height="15" fill="rgb(219,207,3)" fg:x="271627398469" fg:w="225340291"/><text x="19.0976%" y="207.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,281,242,246 samples, 0.09%)</title><rect x="18.7767%" y="245" width="0.0889%" height="15" fill="rgb(222,56,46)" fg:x="270605476085" fg:w="1281242246"/><text x="19.0267%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (462,677,449 samples, 0.03%)</title><rect x="18.8958%" y="181" width="0.0321%" height="15" fill="rgb(239,76,54)" fg:x="272322220972" fg:w="462677449"/><text x="19.1458%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (254,203,791 samples, 0.02%)</title><rect x="18.9279%" y="181" width="0.0176%" height="15" fill="rgb(231,124,27)" fg:x="272784898421" fg:w="254203791"/><text x="19.1779%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (506,032,115 samples, 0.04%)</title><rect x="18.9887%" y="117" width="0.0351%" height="15" fill="rgb(249,195,6)" fg:x="273661486762" fg:w="506032115"/><text x="19.2387%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (363,526,186 samples, 0.03%)</title><rect x="18.9986%" y="101" width="0.0252%" height="15" fill="rgb(237,174,47)" fg:x="273803992691" fg:w="363526186"/><text x="19.2486%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,555,168,302 samples, 0.11%)</title><rect x="18.9803%" y="165" width="0.1079%" height="15" fill="rgb(206,201,31)" fg:x="273540134439" fg:w="1555168302"/><text x="19.2303%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,555,168,302 samples, 0.11%)</title><rect x="18.9803%" y="149" width="0.1079%" height="15" fill="rgb(231,57,52)" fg:x="273540134439" fg:w="1555168302"/><text x="19.2303%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1,459,435,581 samples, 0.10%)</title><rect x="18.9870%" y="133" width="0.1013%" height="15" fill="rgb(248,177,22)" fg:x="273635867160" fg:w="1459435581"/><text x="19.2370%" y="143.50"></text></g><g><title>realloc (827,777,439 samples, 0.06%)</title><rect x="19.0308%" y="117" width="0.0574%" height="15" fill="rgb(215,211,37)" fg:x="274267525302" fg:w="827777439"/><text x="19.2808%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (162,700,805 samples, 0.01%)</title><rect x="19.0882%" y="165" width="0.0113%" height="15" fill="rgb(241,128,51)" fg:x="275095302741" fg:w="162700805"/><text x="19.3382%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (162,700,805 samples, 0.01%)</title><rect x="19.0882%" y="149" width="0.0113%" height="15" fill="rgb(227,165,31)" fg:x="275095302741" fg:w="162700805"/><text x="19.3382%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (236,624,938 samples, 0.02%)</title><rect x="19.1041%" y="165" width="0.0164%" height="15" fill="rgb(228,167,24)" fg:x="275324431552" fg:w="236624938"/><text x="19.3541%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,974,719,307 samples, 0.28%)</title><rect x="18.9524%" y="181" width="0.2758%" height="15" fill="rgb(228,143,12)" fg:x="273137201786" fg:w="3974719307"/><text x="19.2024%" y="191.50"></text></g><g><title>malloc (1,550,864,603 samples, 0.11%)</title><rect x="19.1205%" y="165" width="0.1076%" height="15" fill="rgb(249,149,8)" fg:x="275561056490" fg:w="1550864603"/><text x="19.3705%" y="175.50"></text></g><g><title>alloc::raw_vec::layout_array (194,218,724 samples, 0.01%)</title><rect x="19.2282%" y="181" width="0.0135%" height="15" fill="rgb(243,35,44)" fg:x="277111921093" fg:w="194218724"/><text x="19.4782%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (194,218,724 samples, 0.01%)</title><rect x="19.2282%" y="165" width="0.0135%" height="15" fill="rgb(246,89,9)" fg:x="277111921093" fg:w="194218724"/><text x="19.4782%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,448,041,345 samples, 0.38%)</title><rect x="18.8776%" y="229" width="0.3780%" height="15" fill="rgb(233,213,13)" fg:x="272060066810" fg:w="5448041345"/><text x="19.1276%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (5,448,041,345 samples, 0.38%)</title><rect x="18.8776%" y="213" width="0.3780%" height="15" fill="rgb(233,141,41)" fg:x="272060066810" fg:w="5448041345"/><text x="19.1276%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5,394,723,731 samples, 0.37%)</title><rect x="18.8813%" y="197" width="0.3743%" height="15" fill="rgb(239,167,4)" fg:x="272113384424" fg:w="5394723731"/><text x="19.1313%" y="207.50"></text></g><g><title>core::cmp::max (201,968,338 samples, 0.01%)</title><rect x="19.2416%" y="181" width="0.0140%" height="15" fill="rgb(209,217,16)" fg:x="277306139817" fg:w="201968338"/><text x="19.4916%" y="191.50"></text></g><g><title>core::cmp::Ord::max (201,968,338 samples, 0.01%)</title><rect x="19.2416%" y="165" width="0.0140%" height="15" fill="rgb(219,88,35)" fg:x="277306139817" fg:w="201968338"/><text x="19.4916%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (211,387,107 samples, 0.01%)</title><rect x="19.2556%" y="229" width="0.0147%" height="15" fill="rgb(220,193,23)" fg:x="277508108155" fg:w="211387107"/><text x="19.5056%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (211,387,107 samples, 0.01%)</title><rect x="19.2556%" y="213" width="0.0147%" height="15" fill="rgb(230,90,52)" fg:x="277508108155" fg:w="211387107"/><text x="19.5056%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (211,387,107 samples, 0.01%)</title><rect x="19.2556%" y="197" width="0.0147%" height="15" fill="rgb(252,106,19)" fg:x="277508108155" fg:w="211387107"/><text x="19.5056%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (211,387,107 samples, 0.01%)</title><rect x="19.2556%" y="181" width="0.0147%" height="15" fill="rgb(206,74,20)" fg:x="277508108155" fg:w="211387107"/><text x="19.5056%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,311,773,289 samples, 0.51%)</title><rect x="18.8656%" y="245" width="0.5073%" height="15" fill="rgb(230,138,44)" fg:x="271886718331" fg:w="7311773289"/><text x="19.1156%" y="255.50"></text></g><g><title>core::ptr::write (1,478,996,358 samples, 0.10%)</title><rect x="19.2703%" y="229" width="0.1026%" height="15" fill="rgb(235,182,43)" fg:x="277719495262" fg:w="1478996358"/><text x="19.5203%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (182,187,300 samples, 0.01%)</title><rect x="19.3729%" y="245" width="0.0126%" height="15" fill="rgb(242,16,51)" fg:x="279198491620" fg:w="182187300"/><text x="19.6229%" y="255.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_knight_move (11,724,018,795 samples, 0.81%)</title><rect x="18.5995%" y="261" width="0.8135%" height="15" fill="rgb(248,9,4)" fg:x="268051266491" fg:w="11724018795"/><text x="18.8495%" y="271.50"></text></g><g><title>core::num::&lt;impl i16&gt;::abs (394,606,366 samples, 0.03%)</title><rect x="19.3856%" y="245" width="0.0274%" height="15" fill="rgb(210,31,22)" fg:x="279380678920" fg:w="394606366"/><text x="19.6356%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (569,424,083 samples, 0.04%)</title><rect x="21.7695%" y="229" width="0.0395%" height="15" fill="rgb(239,54,39)" fg:x="313736831360" fg:w="569424083"/><text x="22.0195%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,301,958,566 samples, 0.30%)</title><rect x="21.5754%" y="245" width="0.2985%" height="15" fill="rgb(230,99,41)" fg:x="310939466998" fg:w="4301958566"/><text x="21.8254%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (935,170,121 samples, 0.06%)</title><rect x="21.8090%" y="229" width="0.0649%" height="15" fill="rgb(253,106,12)" fg:x="314306255443" fg:w="935170121"/><text x="22.0590%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,728,876,369 samples, 0.19%)</title><rect x="22.4062%" y="181" width="0.1894%" height="15" fill="rgb(213,46,41)" fg:x="322913288438" fg:w="2728876369"/><text x="22.6562%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1,965,255,127 samples, 0.14%)</title><rect x="22.5956%" y="181" width="0.1364%" height="15" fill="rgb(215,133,35)" fg:x="325642164807" fg:w="1965255127"/><text x="22.8456%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (741,893,578 samples, 0.05%)</title><rect x="22.7319%" y="181" width="0.0515%" height="15" fill="rgb(213,28,5)" fg:x="327607419934" fg:w="741893578"/><text x="22.9819%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (568,797,489 samples, 0.04%)</title><rect x="22.9704%" y="133" width="0.0395%" height="15" fill="rgb(215,77,49)" fg:x="331044165411" fg:w="568797489"/><text x="23.2204%" y="143.50"></text></g><g><title>[libc.so.6] (148,309,659 samples, 0.01%)</title><rect x="23.0376%" y="117" width="0.0103%" height="15" fill="rgb(248,100,22)" fg:x="332012324203" fg:w="148309659"/><text x="23.2876%" y="127.50"></text></g><g><title>__rustc::__rdl_realloc (3,463,612,096 samples, 0.24%)</title><rect x="23.0479%" y="117" width="0.2403%" height="15" fill="rgb(208,67,9)" fg:x="332160633862" fg:w="3463612096"/><text x="23.2979%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1,868,614,845 samples, 0.13%)</title><rect x="23.1585%" y="101" width="0.1297%" height="15" fill="rgb(219,133,21)" fg:x="333755631113" fg:w="1868614845"/><text x="23.4085%" y="111.50"></text></g><g><title>__rustc::__rust_realloc (621,899,804 samples, 0.04%)</title><rect x="23.2882%" y="117" width="0.0432%" height="15" fill="rgb(246,46,29)" fg:x="335624245958" fg:w="621899804"/><text x="23.5382%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (30,306,985,818 samples, 2.10%)</title><rect x="22.9645%" y="165" width="2.1029%" height="15" fill="rgb(246,185,52)" fg:x="330959107266" fg:w="30306985818"/><text x="23.2145%" y="175.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (30,306,985,818 samples, 2.10%)</title><rect x="22.9645%" y="149" width="2.1029%" height="15" fill="rgb(252,136,11)" fg:x="330959107266" fg:w="30306985818"/><text x="23.2145%" y="159.50">a..</text></g><g><title>alloc::alloc::realloc (29,653,130,184 samples, 2.06%)</title><rect x="23.0099%" y="133" width="2.0576%" height="15" fill="rgb(219,138,53)" fg:x="331612962900" fg:w="29653130184"/><text x="23.2599%" y="143.50">a..</text></g><g><title>realloc (25,019,947,322 samples, 1.74%)</title><rect x="23.3313%" y="117" width="1.7361%" height="15" fill="rgb(211,51,23)" fg:x="336246145762" fg:w="25019947322"/><text x="23.5813%" y="127.50"></text></g><g><title>[libc.so.6] (15,049,812,075 samples, 1.04%)</title><rect x="24.0231%" y="101" width="1.0443%" height="15" fill="rgb(247,221,28)" fg:x="346216281009" fg:w="15049812075"/><text x="24.2731%" y="111.50"></text></g><g><title>[libc.so.6] (7,212,724,667 samples, 0.50%)</title><rect x="24.5669%" y="85" width="0.5005%" height="15" fill="rgb(251,222,45)" fg:x="354053368417" fg:w="7212724667"/><text x="24.8169%" y="95.50"></text></g><g><title>__rustc::__rdl_alloc (996,284,416 samples, 0.07%)</title><rect x="25.0674%" y="165" width="0.0691%" height="15" fill="rgb(217,162,53)" fg:x="361266093084" fg:w="996284416"/><text x="25.3174%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (983,360,939 samples, 0.07%)</title><rect x="25.0683%" y="149" width="0.0682%" height="15" fill="rgb(229,93,14)" fg:x="361279016561" fg:w="983360939"/><text x="25.3183%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (433,196,329 samples, 0.03%)</title><rect x="25.1365%" y="165" width="0.0301%" height="15" fill="rgb(209,67,49)" fg:x="362262377500" fg:w="433196329"/><text x="25.3865%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1,341,629,995 samples, 0.09%)</title><rect x="25.1666%" y="165" width="0.0931%" height="15" fill="rgb(213,87,29)" fg:x="362695573829" fg:w="1341629995"/><text x="25.4166%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (41,963,262,091 samples, 2.91%)</title><rect x="22.7834%" y="181" width="2.9117%" height="15" fill="rgb(205,151,52)" fg:x="328349313512" fg:w="41963262091"/><text x="23.0334%" y="191.50">al..</text></g><g><title>malloc (6,275,371,779 samples, 0.44%)</title><rect x="25.2597%" y="165" width="0.4354%" height="15" fill="rgb(253,215,39)" fg:x="364037203824" fg:w="6275371779"/><text x="25.5097%" y="175.50"></text></g><g><title>alloc::raw_vec::layout_array (976,526,942 samples, 0.07%)</title><rect x="25.6951%" y="181" width="0.0678%" height="15" fill="rgb(221,220,41)" fg:x="370312575603" fg:w="976526942"/><text x="25.9451%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (976,526,942 samples, 0.07%)</title><rect x="25.6951%" y="165" width="0.0678%" height="15" fill="rgb(218,133,21)" fg:x="370312575603" fg:w="976526942"/><text x="25.9451%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (274,533,398 samples, 0.02%)</title><rect x="25.7438%" y="149" width="0.0190%" height="15" fill="rgb(221,193,43)" fg:x="371014569147" fg:w="274533398"/><text x="25.9938%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (274,533,398 samples, 0.02%)</title><rect x="25.7438%" y="133" width="0.0190%" height="15" fill="rgb(240,128,52)" fg:x="371014569147" fg:w="274533398"/><text x="25.9938%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (274,533,398 samples, 0.02%)</title><rect x="25.7438%" y="117" width="0.0190%" height="15" fill="rgb(253,114,12)" fg:x="371014569147" fg:w="274533398"/><text x="25.9938%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (50,735,151,335 samples, 3.52%)</title><rect x="22.3073%" y="229" width="3.5204%" height="15" fill="rgb(215,223,47)" fg:x="321488417097" fg:w="50735151335"/><text x="22.5573%" y="239.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (50,735,151,335 samples, 3.52%)</title><rect x="22.3073%" y="213" width="3.5204%" height="15" fill="rgb(248,225,23)" fg:x="321488417097" fg:w="50735151335"/><text x="22.5573%" y="223.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (50,261,235,735 samples, 3.49%)</title><rect x="22.3402%" y="197" width="3.4875%" height="15" fill="rgb(250,108,0)" fg:x="321962332697" fg:w="50261235735"/><text x="22.5902%" y="207.50">all..</text></g><g><title>core::cmp::max (934,465,887 samples, 0.06%)</title><rect x="25.7629%" y="181" width="0.0648%" height="15" fill="rgb(228,208,7)" fg:x="371289102545" fg:w="934465887"/><text x="26.0129%" y="191.50"></text></g><g><title>core::cmp::Ord::max (934,465,887 samples, 0.06%)</title><rect x="25.7629%" y="165" width="0.0648%" height="15" fill="rgb(244,45,10)" fg:x="371289102545" fg:w="934465887"/><text x="26.0129%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (867,064,257 samples, 0.06%)</title><rect x="25.8277%" y="229" width="0.0602%" height="15" fill="rgb(207,125,25)" fg:x="372223568432" fg:w="867064257"/><text x="26.0777%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (867,064,257 samples, 0.06%)</title><rect x="25.8277%" y="213" width="0.0602%" height="15" fill="rgb(210,195,18)" fg:x="372223568432" fg:w="867064257"/><text x="26.0777%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (867,064,257 samples, 0.06%)</title><rect x="25.8277%" y="197" width="0.0602%" height="15" fill="rgb(249,80,12)" fg:x="372223568432" fg:w="867064257"/><text x="26.0777%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (867,064,257 samples, 0.06%)</title><rect x="25.8277%" y="181" width="0.0602%" height="15" fill="rgb(221,65,9)" fg:x="372223568432" fg:w="867064257"/><text x="26.0777%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (67,870,832,203 samples, 4.71%)</title><rect x="21.8739%" y="245" width="4.7094%" height="15" fill="rgb(235,49,36)" fg:x="315241425564" fg:w="67870832203"/><text x="22.1239%" y="255.50">alloc..</text></g><g><title>core::ptr::write (10,021,625,078 samples, 0.70%)</title><rect x="25.8879%" y="229" width="0.6954%" height="15" fill="rgb(225,32,20)" fg:x="373090632689" fg:w="10021625078"/><text x="26.1379%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (431,115,441 samples, 0.03%)</title><rect x="26.5833%" y="245" width="0.0299%" height="15" fill="rgb(215,141,46)" fg:x="383112257767" fg:w="431115441"/><text x="26.8333%" y="255.50"></text></g><g><title>core::num::&lt;impl i32&gt;::abs (4,441,534,386 samples, 0.31%)</title><rect x="26.6132%" y="245" width="0.3082%" height="15" fill="rgb(250,160,47)" fg:x="383543373208" fg:w="4441534386"/><text x="26.8632%" y="255.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_move (109,505,066,189 samples, 7.60%)</title><rect x="19.4130%" y="261" width="7.5983%" height="15" fill="rgb(216,222,40)" fg:x="279775285286" fg:w="109505066189"/><text x="19.6630%" y="271.50">chess_rs::..</text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (1,295,443,881 samples, 0.09%)</title><rect x="26.9214%" y="245" width="0.0899%" height="15" fill="rgb(234,217,39)" fg:x="387984907594" fg:w="1295443881"/><text x="27.1714%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1,295,443,881 samples, 0.09%)</title><rect x="26.9214%" y="229" width="0.0899%" height="15" fill="rgb(207,178,40)" fg:x="387984907594" fg:w="1295443881"/><text x="27.1714%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1,295,443,881 samples, 0.09%)</title><rect x="26.9214%" y="213" width="0.0899%" height="15" fill="rgb(221,136,13)" fg:x="387984907594" fg:w="1295443881"/><text x="27.1714%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,295,443,881 samples, 0.09%)</title><rect x="26.9214%" y="197" width="0.0899%" height="15" fill="rgb(249,199,10)" fg:x="387984907594" fg:w="1295443881"/><text x="27.1714%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (212,290,333 samples, 0.01%)</title><rect x="27.3591%" y="181" width="0.0147%" height="15" fill="rgb(249,222,13)" fg:x="394293801922" fg:w="212290333"/><text x="27.6091%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (291,756,003 samples, 0.02%)</title><rect x="27.3739%" y="181" width="0.0202%" height="15" fill="rgb(244,185,38)" fg:x="394506092255" fg:w="291756003"/><text x="27.6239%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (239,786,812 samples, 0.02%)</title><rect x="27.3941%" y="181" width="0.0166%" height="15" fill="rgb(236,202,9)" fg:x="394797848258" fg:w="239786812"/><text x="27.6441%" y="191.50"></text></g><g><title>__rustc::__rdl_alloc (528,707,501 samples, 0.04%)</title><rect x="27.4649%" y="165" width="0.0367%" height="15" fill="rgb(250,229,37)" fg:x="395818624439" fg:w="528707501"/><text x="27.7149%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (528,707,501 samples, 0.04%)</title><rect x="27.4649%" y="149" width="0.0367%" height="15" fill="rgb(206,174,23)" fg:x="395818624439" fg:w="528707501"/><text x="27.7149%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (272,408,916 samples, 0.02%)</title><rect x="27.5016%" y="165" width="0.0189%" height="15" fill="rgb(211,33,43)" fg:x="396347331940" fg:w="272408916"/><text x="27.7516%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (232,239,455 samples, 0.02%)</title><rect x="27.5205%" y="165" width="0.0161%" height="15" fill="rgb(245,58,50)" fg:x="396619740856" fg:w="232239455"/><text x="27.7705%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,696,881,029 samples, 0.40%)</title><rect x="27.4107%" y="181" width="0.3953%" height="15" fill="rgb(244,68,36)" fg:x="395037635070" fg:w="5696881029"/><text x="27.6607%" y="191.50"></text></g><g><title>malloc (3,882,535,788 samples, 0.27%)</title><rect x="27.5366%" y="165" width="0.2694%" height="15" fill="rgb(232,229,15)" fg:x="396851980311" fg:w="3882535788"/><text x="27.7866%" y="175.50"></text></g><g><title>alloc::raw_vec::layout_array (240,768,158 samples, 0.02%)</title><rect x="27.8060%" y="181" width="0.0167%" height="15" fill="rgb(254,30,23)" fg:x="400734516099" fg:w="240768158"/><text x="28.0560%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (240,768,158 samples, 0.02%)</title><rect x="27.8060%" y="165" width="0.0167%" height="15" fill="rgb(235,160,14)" fg:x="400734516099" fg:w="240768158"/><text x="28.0560%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (233,368,490 samples, 0.02%)</title><rect x="27.8065%" y="149" width="0.0162%" height="15" fill="rgb(212,155,44)" fg:x="400741915767" fg:w="233368490"/><text x="28.0565%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (233,368,490 samples, 0.02%)</title><rect x="27.8065%" y="133" width="0.0162%" height="15" fill="rgb(226,2,50)" fg:x="400741915767" fg:w="233368490"/><text x="28.0565%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (233,368,490 samples, 0.02%)</title><rect x="27.8065%" y="117" width="0.0162%" height="15" fill="rgb(234,177,6)" fg:x="400741915767" fg:w="233368490"/><text x="28.0565%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7,191,408,887 samples, 0.50%)</title><rect x="27.3399%" y="229" width="0.4990%" height="15" fill="rgb(217,24,9)" fg:x="394017156980" fg:w="7191408887"/><text x="27.5899%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (7,191,408,887 samples, 0.50%)</title><rect x="27.3399%" y="213" width="0.4990%" height="15" fill="rgb(220,13,46)" fg:x="394017156980" fg:w="7191408887"/><text x="27.5899%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,174,342,231 samples, 0.50%)</title><rect x="27.3411%" y="197" width="0.4978%" height="15" fill="rgb(239,221,27)" fg:x="394034223636" fg:w="7174342231"/><text x="27.5911%" y="207.50"></text></g><g><title>core::cmp::max (233,281,610 samples, 0.02%)</title><rect x="27.8227%" y="181" width="0.0162%" height="15" fill="rgb(222,198,25)" fg:x="400975284257" fg:w="233281610"/><text x="28.0727%" y="191.50"></text></g><g><title>core::cmp::Ord::max (233,281,610 samples, 0.02%)</title><rect x="27.8227%" y="165" width="0.0162%" height="15" fill="rgb(211,99,13)" fg:x="400975284257" fg:w="233281610"/><text x="28.0727%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8,529,413,606 samples, 0.59%)</title><rect x="27.3145%" y="245" width="0.5918%" height="15" fill="rgb(232,111,31)" fg:x="393651222557" fg:w="8529413606"/><text x="27.5645%" y="255.50"></text></g><g><title>core::ptr::write (967,885,471 samples, 0.07%)</title><rect x="27.8392%" y="229" width="0.0672%" height="15" fill="rgb(245,82,37)" fg:x="401212750692" fg:w="967885471"/><text x="28.0892%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (352,865,020 samples, 0.02%)</title><rect x="27.9064%" y="245" width="0.0245%" height="15" fill="rgb(227,149,46)" fg:x="402180636163" fg:w="352865020"/><text x="28.1564%" y="255.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_pawn_move (13,511,227,943 samples, 0.94%)</title><rect x="27.0113%" y="261" width="0.9375%" height="15" fill="rgb(218,36,50)" fg:x="389280351475" fg:w="13511227943"/><text x="27.2613%" y="271.50"></text></g><g><title>core::ops::range::Range&lt;Idx&gt;::contains (258,078,235 samples, 0.02%)</title><rect x="27.9309%" y="245" width="0.0179%" height="15" fill="rgb(226,80,48)" fg:x="402533501183" fg:w="258078235"/><text x="28.1809%" y="255.50"></text></g><g><title>core::ops::range::RangeBounds::contains (258,078,235 samples, 0.02%)</title><rect x="27.9309%" y="229" width="0.0179%" height="15" fill="rgb(238,224,15)" fg:x="402533501183" fg:w="258078235"/><text x="28.1809%" y="239.50"></text></g><g><title>chess_rs::move_gen::state::State::active (1,266,539,193 samples, 0.09%)</title><rect x="27.9488%" y="261" width="0.0879%" height="15" fill="rgb(241,136,10)" fg:x="402791579418" fg:w="1266539193"/><text x="28.1988%" y="271.50"></text></g><g><title>[libc.so.6] (247,246,197 samples, 0.02%)</title><rect x="28.1024%" y="165" width="0.0172%" height="15" fill="rgb(208,32,45)" fg:x="405005954975" fg:w="247246197"/><text x="28.3524%" y="175.50"></text></g><g><title>__rustc::__rust_dealloc (783,503,434 samples, 0.05%)</title><rect x="28.1211%" y="165" width="0.0544%" height="15" fill="rgb(207,135,9)" fg:x="405274474435" fg:w="783503434"/><text x="28.3711%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,710,325,091 samples, 1.09%)</title><rect x="28.0550%" y="197" width="1.0901%" height="15" fill="rgb(206,86,44)" fg:x="404322230955" fg:w="15710325091"/><text x="28.3050%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (15,710,325,091 samples, 1.09%)</title><rect x="28.0550%" y="181" width="1.0901%" height="15" fill="rgb(245,177,15)" fg:x="404322230955" fg:w="15710325091"/><text x="28.3050%" y="191.50"></text></g><g><title>cfree (13,974,578,177 samples, 0.97%)</title><rect x="28.1754%" y="165" width="0.9697%" height="15" fill="rgb(206,64,50)" fg:x="406057977869" fg:w="13974578177"/><text x="28.4254%" y="175.50"></text></g><g><title>[libc.so.6] (1,884,400,339 samples, 0.13%)</title><rect x="29.0143%" y="149" width="0.1308%" height="15" fill="rgb(234,36,40)" fg:x="418148155707" fg:w="1884400339"/><text x="29.2643%" y="159.50"></text></g><g><title>chess_rs::move_gen::move_gen::moves (230,034,574,818 samples, 15.96%)</title><rect x="13.1934%" y="277" width="15.9616%" height="15" fill="rgb(213,64,8)" fg:x="190140700055" fg:w="230034574818"/><text x="13.4434%" y="287.50">chess_rs::move_gen::move_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,u8)&gt;&gt; (16,117,156,262 samples, 1.12%)</title><rect x="28.0367%" y="261" width="1.1183%" height="15" fill="rgb(210,75,36)" fg:x="404058118611" fg:w="16117156262"/><text x="28.2867%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u8)&gt;&gt; (15,853,043,918 samples, 1.10%)</title><rect x="28.0550%" y="245" width="1.1000%" height="15" fill="rgb(229,88,21)" fg:x="404322230955" fg:w="15853043918"/><text x="28.3050%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,853,043,918 samples, 1.10%)</title><rect x="28.0550%" y="229" width="1.1000%" height="15" fill="rgb(252,204,47)" fg:x="404322230955" fg:w="15853043918"/><text x="28.3050%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,853,043,918 samples, 1.10%)</title><rect x="28.0550%" y="213" width="1.1000%" height="15" fill="rgb(208,77,27)" fg:x="404322230955" fg:w="15853043918"/><text x="28.3050%" y="223.50"></text></g><g><title>chess_rs::move_gen::outcome::outcome (88,313,345,012 samples, 6.13%)</title><rect x="29.1550%" y="277" width="6.1279%" height="15" fill="rgb(221,76,26)" fg:x="420175274873" fg:w="88313345012"/><text x="29.4050%" y="287.50">chess_rs..</text></g><g><title>&lt;chess_rs::move_gen::state::State as core::clone::Clone&gt;::clone (11,550,101,030 samples, 0.80%)</title><rect x="34.4814%" y="261" width="0.8014%" height="15" fill="rgb(225,139,18)" fg:x="496938518855" fg:w="11550101030"/><text x="34.7314%" y="271.50"></text></g><g><title>chess_rs::tree_search::search::negamax (903,923,399,621 samples, 62.72%)</title><rect x="35.2828%" y="277" width="62.7211%" height="15" fill="rgb(230,137,11)" fg:x="508488619885" fg:w="903923399621"/><text x="35.5328%" y="287.50">chess_rs::tree_search::search::negamax</text></g><g><title>chess_rs::eval::eval::material_eval (876,653,267,347 samples, 60.83%)</title><rect x="37.1751%" y="261" width="60.8289%" height="15" fill="rgb(212,28,1)" fg:x="535758752159" fg:w="876653267347"/><text x="37.4251%" y="271.50">chess_rs::eval::eval::material_eval</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74,969,101,445 samples, 5.20%)</title><rect x="92.8020%" y="245" width="5.2019%" height="15" fill="rgb(248,164,17)" fg:x="1337442918061" fg:w="74969101445"/><text x="93.0520%" y="255.50">&lt;core:..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (71,891,547,499 samples, 4.99%)</title><rect x="93.0156%" y="229" width="4.9884%" height="15" fill="rgb(222,171,42)" fg:x="1340520472007" fg:w="71891547499"/><text x="93.2656%" y="239.50">&lt;core:..</text></g><g><title>__rustc::__rust_dealloc (168,402,630 samples, 0.01%)</title><rect x="98.0246%" y="133" width="0.0117%" height="15" fill="rgb(243,84,45)" fg:x="1412708592699" fg:w="168402630"/><text x="98.2746%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,774,680,317 samples, 0.47%)</title><rect x="98.0040%" y="165" width="0.4701%" height="15" fill="rgb(252,49,23)" fg:x="1412412019506" fg:w="6774680317"/><text x="98.2540%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (6,774,680,317 samples, 0.47%)</title><rect x="98.0040%" y="149" width="0.4701%" height="15" fill="rgb(215,19,7)" fg:x="1412412019506" fg:w="6774680317"/><text x="98.2540%" y="159.50"></text></g><g><title>cfree (6,309,704,494 samples, 0.44%)</title><rect x="98.0362%" y="133" width="0.4378%" height="15" fill="rgb(238,81,41)" fg:x="1412876995329" fg:w="6309704494"/><text x="98.2862%" y="143.50"></text></g><g><title>[libc.so.6] (4,271,914,547 samples, 0.30%)</title><rect x="98.1776%" y="117" width="0.2964%" height="15" fill="rgb(210,199,37)" fg:x="1414914785276" fg:w="4271914547"/><text x="98.4276%" y="127.50"></text></g><g><title>[libc.so.6] (2,255,497,518 samples, 0.16%)</title><rect x="98.3176%" y="101" width="0.1565%" height="15" fill="rgb(244,192,49)" fg:x="1416931202305" fg:w="2255497518"/><text x="98.5676%" y="111.50"></text></g><g><title>[libc.so.6] (270,017,038 samples, 0.02%)</title><rect x="98.4553%" y="85" width="0.0187%" height="15" fill="rgb(226,211,11)" fg:x="1418916682785" fg:w="270017038"/><text x="98.7053%" y="95.50"></text></g><g><title>chess_rs::tree_search::search::negamax (1,337,681,402,212 samples, 92.82%)</title><rect x="5.6584%" y="293" width="92.8186%" height="15" fill="rgb(236,162,54)" fg:x="81548050503" fg:w="1337681402212"/><text x="5.9084%" y="303.50">chess_rs::tree_search::search::negamax</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u8,u8)&gt;&gt; (6,817,433,209 samples, 0.47%)</title><rect x="98.0040%" y="277" width="0.4730%" height="15" fill="rgb(220,229,9)" fg:x="1412412019506" fg:w="6817433209"/><text x="98.2540%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,817,433,209 samples, 0.47%)</title><rect x="98.0040%" y="261" width="0.4730%" height="15" fill="rgb(250,87,22)" fg:x="1412412019506" fg:w="6817433209"/><text x="98.2540%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u8,u8),alloc::alloc::Global&gt;&gt; (6,817,433,209 samples, 0.47%)</title><rect x="98.0040%" y="245" width="0.4730%" height="15" fill="rgb(239,43,17)" fg:x="1412412019506" fg:w="6817433209"/><text x="98.2540%" y="255.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,817,433,209 samples, 0.47%)</title><rect x="98.0040%" y="229" width="0.4730%" height="15" fill="rgb(231,177,25)" fg:x="1412412019506" fg:w="6817433209"/><text x="98.2540%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u8)&gt;&gt; (6,817,433,209 samples, 0.47%)</title><rect x="98.0040%" y="213" width="0.4730%" height="15" fill="rgb(219,179,1)" fg:x="1412412019506" fg:w="6817433209"/><text x="98.2540%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,817,433,209 samples, 0.47%)</title><rect x="98.0040%" y="197" width="0.4730%" height="15" fill="rgb(238,219,53)" fg:x="1412412019506" fg:w="6817433209"/><text x="98.2540%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,817,433,209 samples, 0.47%)</title><rect x="98.0040%" y="181" width="0.4730%" height="15" fill="rgb(232,167,36)" fg:x="1412412019506" fg:w="6817433209"/><text x="98.2540%" y="191.50"></text></g><g><title>chess_rs::tree_search::search::negamax (1,389,303,182,414 samples, 96.40%)</title><rect x="2.1441%" y="309" width="96.4005%" height="15" fill="rgb(244,19,51)" fg:x="30900962310" fg:w="1389303182414"/><text x="2.3941%" y="319.50">chess_rs::tree_search::search::negamax</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u8,u8)&gt;&gt; (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="293" width="0.0676%" height="15" fill="rgb(224,6,22)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="277" width="0.0676%" height="15" fill="rgb(224,145,5)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u8,u8),alloc::alloc::Global&gt;&gt; (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="261" width="0.0676%" height="15" fill="rgb(234,130,49)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="245" width="0.0676%" height="15" fill="rgb(254,6,2)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u8)&gt;&gt; (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="229" width="0.0676%" height="15" fill="rgb(208,96,46)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="213" width="0.0676%" height="15" fill="rgb(239,3,39)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="197" width="0.0676%" height="15" fill="rgb(233,210,1)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="181" width="0.0676%" height="15" fill="rgb(244,137,37)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (974,692,009 samples, 0.07%)</title><rect x="98.4770%" y="165" width="0.0676%" height="15" fill="rgb(240,136,2)" fg:x="1419229452715" fg:w="974692009"/><text x="98.7270%" y="175.50"></text></g><g><title>cfree (945,012,490 samples, 0.07%)</title><rect x="98.4791%" y="149" width="0.0656%" height="15" fill="rgb(239,18,37)" fg:x="1419259132234" fg:w="945012490"/><text x="98.7291%" y="159.50"></text></g><g><title>[libc.so.6] (642,521,699 samples, 0.04%)</title><rect x="98.5001%" y="133" width="0.0446%" height="15" fill="rgb(218,185,22)" fg:x="1419561623025" fg:w="642521699"/><text x="98.7501%" y="143.50"></text></g><g><title>[libc.so.6] (420,836,066 samples, 0.03%)</title><rect x="98.5155%" y="117" width="0.0292%" height="15" fill="rgb(225,218,4)" fg:x="1419783308658" fg:w="420836066"/><text x="98.7655%" y="127.50"></text></g><g><title>chess_rs::tree_search::search::negamax (1,394,764,530,010 samples, 96.78%)</title><rect x="1.7720%" y="325" width="96.7795%" height="15" fill="rgb(230,182,32)" fg:x="25537664562" fg:w="1394764530010"/><text x="2.0220%" y="335.50">chess_rs::tree_search::search::negamax</text></g><g><title>chess_rs::tree_search::search::negamax (1,395,247,600,549 samples, 96.81%)</title><rect x="1.7397%" y="341" width="96.8130%" height="15" fill="rgb(242,56,43)" fg:x="25071717513" fg:w="1395247600549"/><text x="1.9897%" y="351.50">chess_rs::tree_search::search::negamax</text></g><g><title>_start (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="693" width="96.8158%" height="15" fill="rgb(233,99,24)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="703.50">_start</text></g><g><title>__libc_start_main (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="677" width="96.8158%" height="15" fill="rgb(234,209,42)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="687.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="661" width="96.8158%" height="15" fill="rgb(227,7,12)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="671.50">[libc.so.6]</text></g><g><title>main (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="645" width="96.8158%" height="15" fill="rgb(245,203,43)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="629" width="96.8158%" height="15" fill="rgb(238,205,33)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="613" width="96.8158%" height="15" fill="rgb(231,56,7)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="597" width="96.8158%" height="15" fill="rgb(244,186,29)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="581" width="96.8158%" height="15" fill="rgb(234,111,31)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="565" width="96.8158%" height="15" fill="rgb(241,149,10)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="575.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="549" width="96.8158%" height="15" fill="rgb(249,206,44)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="533" width="96.8158%" height="15" fill="rgb(251,153,30)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="517" width="96.8158%" height="15" fill="rgb(239,152,38)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="501" width="96.8158%" height="15" fill="rgb(249,139,47)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="485" width="96.8158%" height="15" fill="rgb(244,64,35)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="495.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="469" width="96.8158%" height="15" fill="rgb(216,46,15)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="453" width="96.8158%" height="15" fill="rgb(250,74,19)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>chess_rs::main (1,395,288,880,123 samples, 96.82%)</title><rect x="1.7371%" y="437" width="96.8158%" height="15" fill="rgb(249,42,33)" fg:x="25034779657" fg:w="1395288880123"/><text x="1.9871%" y="447.50">chess_rs::main</text></g><g><title>chess_rs::tree_search::search::get_best_moves (1,395,288,378,619 samples, 96.82%)</title><rect x="1.7371%" y="421" width="96.8158%" height="15" fill="rgb(242,149,17)" fg:x="25035281161" fg:w="1395288378619"/><text x="1.9871%" y="431.50">chess_rs::tree_search::search::get_best_moves</text></g><g><title>chess_rs::tree_search::search::iter_deepening (1,395,288,378,619 samples, 96.82%)</title><rect x="1.7371%" y="405" width="96.8158%" height="15" fill="rgb(244,29,21)" fg:x="25035281161" fg:w="1395288378619"/><text x="1.9871%" y="415.50">chess_rs::tree_search::search::iter_deepening</text></g><g><title>chess_rs::tree_search::search::negamax (1,395,288,378,619 samples, 96.82%)</title><rect x="1.7371%" y="389" width="96.8158%" height="15" fill="rgb(220,130,37)" fg:x="25035281161" fg:w="1395288378619"/><text x="1.9871%" y="399.50">chess_rs::tree_search::search::negamax</text></g><g><title>chess_rs::tree_search::search::negamax (1,395,288,378,619 samples, 96.82%)</title><rect x="1.7371%" y="373" width="96.8158%" height="15" fill="rgb(211,67,2)" fg:x="25035281161" fg:w="1395288378619"/><text x="1.9871%" y="383.50">chess_rs::tree_search::search::negamax</text></g><g><title>chess_rs::tree_search::search::negamax (1,395,277,789,783 samples, 96.82%)</title><rect x="1.7379%" y="357" width="96.8151%" height="15" fill="rgb(235,68,52)" fg:x="25045869997" fg:w="1395277789783"/><text x="1.9879%" y="367.50">chess_rs::tree_search::search::negamax</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (507,124,817 samples, 0.04%)</title><rect x="98.5529%" y="693" width="0.0352%" height="15" fill="rgb(246,142,3)" fg:x="1420323659780" fg:w="507124817"/><text x="98.8029%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (502,845,593 samples, 0.03%)</title><rect x="98.5532%" y="677" width="0.0349%" height="15" fill="rgb(241,25,7)" fg:x="1420327939004" fg:w="502845593"/><text x="98.8032%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (740,448,066 samples, 0.05%)</title><rect x="98.5881%" y="693" width="0.0514%" height="15" fill="rgb(242,119,39)" fg:x="1420830784597" fg:w="740448066"/><text x="98.8381%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (622,160,017 samples, 0.04%)</title><rect x="98.5963%" y="677" width="0.0432%" height="15" fill="rgb(241,98,45)" fg:x="1420949072646" fg:w="622160017"/><text x="98.8463%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,852,464,194 samples, 0.13%)</title><rect x="98.6395%" y="693" width="0.1285%" height="15" fill="rgb(254,28,30)" fg:x="1421571232663" fg:w="1852464194"/><text x="98.8895%" y="703.50"></text></g><g><title>cfree (1,213,112,210 samples, 0.08%)</title><rect x="98.7738%" y="693" width="0.0842%" height="15" fill="rgb(241,142,54)" fg:x="1423506692771" fg:w="1213112210"/><text x="99.0238%" y="703.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_move (1,340,790,707 samples, 0.09%)</title><rect x="98.8592%" y="693" width="0.0930%" height="15" fill="rgb(222,85,15)" fg:x="1424736825587" fg:w="1340790707"/><text x="99.1092%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (538,269,604 samples, 0.04%)</title><rect x="98.9149%" y="677" width="0.0373%" height="15" fill="rgb(210,85,47)" fg:x="1425539346690" fg:w="538269604"/><text x="99.1649%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (323,309,745 samples, 0.02%)</title><rect x="99.0283%" y="645" width="0.0224%" height="15" fill="rgb(224,206,25)" fg:x="1427174955615" fg:w="323309745"/><text x="99.2783%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (323,309,745 samples, 0.02%)</title><rect x="99.0283%" y="629" width="0.0224%" height="15" fill="rgb(243,201,19)" fg:x="1427174955615" fg:w="323309745"/><text x="99.2783%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (323,309,745 samples, 0.02%)</title><rect x="99.0283%" y="613" width="0.0224%" height="15" fill="rgb(236,59,4)" fg:x="1427174955615" fg:w="323309745"/><text x="99.2783%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (1,389,371,154 samples, 0.10%)</title><rect x="99.0283%" y="677" width="0.0964%" height="15" fill="rgb(254,179,45)" fg:x="1427174955615" fg:w="1389371154"/><text x="99.2783%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,389,371,154 samples, 0.10%)</title><rect x="99.0283%" y="661" width="0.0964%" height="15" fill="rgb(226,14,10)" fg:x="1427174955615" fg:w="1389371154"/><text x="99.2783%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,066,061,409 samples, 0.07%)</title><rect x="99.0508%" y="645" width="0.0740%" height="15" fill="rgb(244,27,41)" fg:x="1427498265360" fg:w="1066061409"/><text x="99.3008%" y="655.50"></text></g><g><title>chess_rs::move_gen::move_gen::can_pawn_move (263,441,802 samples, 0.02%)</title><rect x="99.1313%" y="677" width="0.0183%" height="15" fill="rgb(235,35,32)" fg:x="1428658826897" fg:w="263441802"/><text x="99.3813%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (263,441,802 samples, 0.02%)</title><rect x="99.1313%" y="661" width="0.0183%" height="15" fill="rgb(218,68,31)" fg:x="1428658826897" fg:w="263441802"/><text x="99.3813%" y="671.50"></text></g><g><title>chess_rs::move_gen::move_gen::moves (3,272,997,205 samples, 0.23%)</title><rect x="98.9613%" y="693" width="0.2271%" height="15" fill="rgb(207,120,37)" fg:x="1426208383596" fg:w="3272997205"/><text x="99.2113%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,u8)&gt;&gt; (559,112,102 samples, 0.04%)</title><rect x="99.1496%" y="677" width="0.0388%" height="15" fill="rgb(227,98,0)" fg:x="1428922268699" fg:w="559112102"/><text x="99.3996%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u8)&gt;&gt; (559,112,102 samples, 0.04%)</title><rect x="99.1496%" y="661" width="0.0388%" height="15" fill="rgb(207,7,3)" fg:x="1428922268699" fg:w="559112102"/><text x="99.3996%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (559,112,102 samples, 0.04%)</title><rect x="99.1496%" y="645" width="0.0388%" height="15" fill="rgb(206,98,19)" fg:x="1428922268699" fg:w="559112102"/><text x="99.3996%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (559,112,102 samples, 0.04%)</title><rect x="99.1496%" y="629" width="0.0388%" height="15" fill="rgb(217,5,26)" fg:x="1428922268699" fg:w="559112102"/><text x="99.3996%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (559,112,102 samples, 0.04%)</title><rect x="99.1496%" y="613" width="0.0388%" height="15" fill="rgb(235,190,38)" fg:x="1428922268699" fg:w="559112102"/><text x="99.3996%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (559,112,102 samples, 0.04%)</title><rect x="99.1496%" y="597" width="0.0388%" height="15" fill="rgb(247,86,24)" fg:x="1428922268699" fg:w="559112102"/><text x="99.3996%" y="607.50"></text></g><g><title>chess_rs::move_gen::move_gen::queen_offsets (270,240,430 samples, 0.02%)</title><rect x="99.1884%" y="693" width="0.0188%" height="15" fill="rgb(205,101,16)" fg:x="1429481380801" fg:w="270240430"/><text x="99.4384%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (165,236,348 samples, 0.01%)</title><rect x="99.2153%" y="677" width="0.0115%" height="15" fill="rgb(246,168,33)" fg:x="1429869975720" fg:w="165236348"/><text x="99.4653%" y="687.50"></text></g><g><title>chess_rs::move_gen::move_gen::rook_offsets (411,780,378 samples, 0.03%)</title><rect x="99.2071%" y="693" width="0.0286%" height="15" fill="rgb(231,114,1)" fg:x="1429751621231" fg:w="411780378"/><text x="99.4571%" y="703.50"></text></g><g><title>chess_rs::move_gen::outcome::outcome (652,968,501 samples, 0.05%)</title><rect x="99.2357%" y="693" width="0.0453%" height="15" fill="rgb(207,184,53)" fg:x="1430163401609" fg:w="652968501"/><text x="99.4857%" y="703.50"></text></g><g><title>chess_rs::tree_search::search::negamax (8,712,772,643 samples, 0.60%)</title><rect x="99.2810%" y="693" width="0.6046%" height="15" fill="rgb(224,95,51)" fg:x="1430816370110" fg:w="8712772643"/><text x="99.5310%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(u8,u8)&gt;&gt; (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="677" width="0.0134%" height="15" fill="rgb(212,188,45)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="661" width="0.0134%" height="15" fill="rgb(223,154,38)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(u8,u8),alloc::alloc::Global&gt;&gt; (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="645" width="0.0134%" height="15" fill="rgb(251,22,52)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="655.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="629" width="0.0134%" height="15" fill="rgb(229,209,22)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u8)&gt;&gt; (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="613" width="0.0134%" height="15" fill="rgb(234,138,34)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="597" width="0.0134%" height="15" fill="rgb(212,95,11)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="581" width="0.0134%" height="15" fill="rgb(240,179,47)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="565" width="0.0134%" height="15" fill="rgb(240,163,11)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (193,051,626 samples, 0.01%)</title><rect x="99.8722%" y="549" width="0.0134%" height="15" fill="rgb(236,37,12)" fg:x="1439336091127" fg:w="193051626"/><text x="100.1222%" y="559.50"></text></g><g><title>malloc (1,374,690,465 samples, 0.10%)</title><rect x="99.8856%" y="693" width="0.0954%" height="15" fill="rgb(232,164,16)" fg:x="1439529142753" fg:w="1374690465"/><text x="100.1356%" y="703.50"></text></g><g><title>all (1,441,178,239,038 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(244,205,15)" fg:x="0" fg:w="1441178239038"/><text x="0.2500%" y="735.50"></text></g><g><title>chess_rs (1,441,178,239,038 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(223,117,47)" fg:x="0" fg:w="1441178239038"/><text x="0.2500%" y="719.50">chess_rs</text></g><g><title>realloc (274,405,820 samples, 0.02%)</title><rect x="99.9810%" y="693" width="0.0190%" height="15" fill="rgb(244,107,35)" fg:x="1440903833218" fg:w="274405820"/><text x="100.2310%" y="703.50"></text></g></svg></svg>